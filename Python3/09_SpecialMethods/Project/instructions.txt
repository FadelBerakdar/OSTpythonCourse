create a program named centipede.py, including a class named "Centipede."
This class has the following requirements:

1. Once instantiated if called with a value, it appends that argument to an
internal list:
>>> from centipede import Centipede
>>> ralph = Centipede()
>>> ralph('pretzel')
>>> ralph.stomach
['pretzel']

2. If you print() the class, it returns a comma-delimited string of the internal
list:
>>> ralph('pickles')
>>> print(ralph)
pretzel,pickles

3. Each time an attribute is set on the centipede object, it appends the name
of the attribute to another internal list:
>>> ralph.shoes = 100
>>> ralph.hat = 1
>>> ralph.legs
['shoes', 'hat']

4. The representation of the centipede object must be a comma-delimited string
of this second internal list.
>>> repr(ralph)
'shoes,hat'

5. The legs and stomach attributes should be protected against having their
values reset from outside. They're "internal use only" when it comes to changing
them, and an AttributeError should be raised if attempts are made to set them.
>>> ralph.legs = 3
Traceback (most recent call last):
File "<console>", line 1, in <module>  File "V:\workspace\Python3_Homework09\
src\centipede.py", line 15, in __setattr__    raise
AttributeError("{0} is for internal use only".format(key))AttributeError: legs is for internal use only


